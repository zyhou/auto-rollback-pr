# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Tests and Auto-Revert

on:
  push:
    branches: ["main"]

env:
  ENABLE_AUTO_REVERT: "true"

permissions:
  contents: "write"
  pull-requests: "write"

jobs:
  vitest:
    name: Vitest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch the latest commit and its parent
          token: ${{ secrets.PAT }}
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Use Node.js latest
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run vitest
        run: pnpm test
        continue-on-error: true
        id: test-step

      - name: Auto-Revert if tests failed
        if: steps.test-step.outcome == 'failure' && env.ENABLE_AUTO_REVERT == 'true'
        run: |
          set -x  # Turn on debug mode

          # Configure Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get commit data
          TRIGGER_COMMIT="${{ github.sha }}"
          echo "Trigger commit: $TRIGGER_COMMIT"

          # Get the GitHub Actions run URL
          ACTION_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Action URL: $ACTION_URL"

          # Get the PR data
          PR_INFO=$(gh pr list --search "$TRIGGER_COMMIT" --state merged --json number,author,headRefName --jq '.[0] | {
            number: .number,
            author: .author.login,
            branch: .headRefName
          }')

          if [ -z "$PR_INFO" ] || [ "$(echo $PR_INFO | jq 'if .number == null or .author == null or .branch == null then true else false end')" = "true" ]; then
            echo "Could not find associated merged PR for commit $TRIGGER_COMMIT. Exiting."

            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "❌ *Auto-Revert Failed*\n• Could not find PR information for commit `'"$TRIGGER_COMMIT"'`\n• Manual intervention required\n• <'"$ACTION_URL"'|View GitHub Action Run>"
                    }
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}

            exit 1
          fi

          PR_NUMBER=$(echo $PR_INFO | jq -r '.number')
          PR_CREATOR=$(echo $PR_INFO | jq -r '.author')
          ORIGINAL_BRANCH=$(echo $PR_INFO | jq -r '.branch')
          CLICKUP_TASK_ID=$(echo "$ORIGINAL_BRANCH" | grep -oP 'CU-\w+' || echo "")

          echo "PR number: $PR_NUMBER"
          echo "PR creator: $PR_CREATOR"
          echo "Original branch: $ORIGINAL_BRANCH"
          echo "ClickUp Task ID: $CLICKUP_TASK_ID"

          # Step 1: Revert on main branch
          if ! git revert --no-edit $TRIGGER_COMMIT; then
            echo "Failed to revert PR #$PR_NUMBER on main. Manual intervention may be required."

            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "❌ *Auto-Revert Failed*\n• Failed to revert PR #'"$PR_NUMBER"' on main\n• Branch: `'"$ORIGINAL_BRANCH"'`\n• Author: @'"$PR_CREATOR"'\n• ClickUp: '"$CLICKUP_TASK_ID"'\n• <'"$ACTION_URL"'|View GitHub Action Run>\n\n*Manual intervention required*"
                    }
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}

            exit 1
          fi

          git push origin main

          # Step 2: Create a new branch
          REVERT_BRANCH="auto-revert-${ORIGINAL_BRANCH}-$(date +%s)"
          git checkout -b $REVERT_BRANCH

          # Step 3: Revert the revert commit
          REVERT_COMMIT=$(git rev-parse HEAD)
          if ! git revert --no-edit $REVERT_COMMIT; then
            echo "Failed to revert the revert commit on $REVERT_BRANCH. Manual intervention may be required."

            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "❌ *Auto-Revert Failed*\n• Failed to revert the revert commit on `'"$REVERT_BRANCH"'`\n• Original PR: #'"$PR_NUMBER"'\n• Author: @'"$PR_CREATOR"'\n• ClickUp: '"$CLICKUP_TASK_ID"'\n• <'"$ACTION_URL"'|View GitHub Action Run>\n\n*Manual intervention required*"
                    }
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}

            exit 1
          fi

          git push origin $REVERT_BRANCH

          # Step 4: Create a PR based on new branch
          NEW_PR_URL=$(gh pr create --base main --head $REVERT_BRANCH \
            --title "Fix: Revert PR #$PR_NUMBER due to failing tests" \
            --body "This PR was created to address the issues in the reverted PR #$PR_NUMBER.
            Please fix the failing tests and update this PR accordingly.

            Original PR: #$PR_NUMBER"
            @$PR_CREATOR please review and fix the failing tests. \
            --assignee "$PR_CREATOR")

          echo "New PR URL: $NEW_PR_URL"

          # Step 5: Comment on the original PR
          gh pr comment $PR_NUMBER --body "This PR has been automatically reverted due to failing E2E tests.
          A new PR has been created to address the issues: $NEW_PR_URL
          @$PR_CREATOR please review and fix the failing tests."

          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Auto-Revert Complete*\n• PR #'"$PR_NUMBER"' has been reverted\n• New PR: '"$NEW_PR_URL"'\n• New branch: `'"$REVERT_BRANCH"'`\n• Author: @'"$PR_CREATOR"'\n• ClickUp: '"$CLICKUP_TASK_ID"'\n\nTests are failing on main branch, please check the new PR to fix the issues."
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
